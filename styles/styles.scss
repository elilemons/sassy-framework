// Contents
// ## Functions
// ## Colors
//// - borders
//// - backgrounds
//// - text
//// - icons
// ## Sizing
// ## Spacing
// ## Flexbox
// ## Misc

// ## Functions
/// @author Mike Kelly  Web
/// @link https://medium.com/@MikeKellyWeb/calculating-color-contrast-with-sass-eff39ef23f96
@function get-color-yiq($background) {
  $r: red($background);
  $g: green($background);
  $b: blue($background);

  $yiq: (($r*299) + ($g*587) + ($b*114))/1000;

  @if ($yiq >= 128) {
    @return #000;
  }
  @else {
    @return #FFF;
  }
}


// ## Colors
$colors: (
  'dark': #25283D,
  'light': #FFFFFF,
  'primary-1': #4D4861,
  'primary-2': #605770,
  'accent': #465775,
  'warn': #9E7682
);

@each $name, $color in $colors {
  .b-#{unquote($name)} {
    border-color: $color !important;
  }

  .bg-#{$name} {
    background: $color;
  }
  .bg-#{$name}-hover {
      &:hover {
        background: $color;
      }
    }

    /// Sets the background color and a contrasting text color on hover
    .bg-#{$name}-hover-and-yiq {
      &:hover, &:hover > .mat-cell {
        background: $color;
        color: get-color-yiq($color);
      }
    }
  .text-#{$name} {
    color: $color;
  }
  .text-#{$name}-hover:hover {
    color: $color !important;
  }
  .icon-#{$name} {
    // This affects all children with this class under .icon-#{$name}
    * > mat-icon {
      color: $color;
    }
  }
  // Useful if you use palettes
//  .icon-#{$name}--#{$possibility}-hover {
//       &:hover {
//         * > mat-icon { // This affects all children with this class under .icon-#{$name}
//           $palette: map-get($palettes, '#{$name}');

//           @if ($palette) {
//             // @error($palette);
//             $result:  map-get($map: $palette, $key: $key);
//             @if ($result) {
//               // @error($darken);
//               color: $result;
//             } @else {
//               @if ($possibility == 'lighten') {
//                 color: lighten($color, 20%);
//               } @else {
//                 color: darken($color, 20%);
//               }
//             }
//           } @else {
//             @if ($possibility == 'lighten') {
//               color: lighten($color, 20%);
//             } @else {
//               color: darken($color, 20%);
//             }
//           }
//         }
//       }
//     }
  .icon-#{$name}-hover:hover {
    // This affects all children with this class under .icon-#{$name}
    * > mat-icon {
      color: $color;
    }
  }
}

// ## Sizing
$sizes: (
  0: 0,
  25: 25%,
  50: 50%,
  75: 75%,
  90: 90%,
  100: 100%
);

@each $prop, $abbrev in (width: w, height: h) {
  @each $size, $length in $sizes {
    .#{$abbrev}-#{$size} { #{$prop}: $length !important; }
  }
}

// ## Spacing
$spacer: 1rem !default;
$spacers: () !default;
$spacers: map-merge((
  0: 0,
  1: ($spacer * .25),
  2: ($spacer * .5),
  3: ($spacer),
  4: ($spacer * 1.5),
  5: ($spacer * 3)
), $spacers);

* { box-sizing: border-box }
body {
  margin: 0;
  padding: 0;
  height: 100vh;
  width: 100vw;
}
.box {
  height: 100%;
  width: 100%;
}

@function borderOrSpacing($abbrev) {
  @if $abbrev == 'b' {
    @return solid;
  }
  @else {
    @return !important;
  }
}

@each $prop, $abbrev in (margin: m, padding: p, border: b) {
  @each $size, $length in $spacers {
    .#{$abbrev}-#{$size} {
      #{$prop}: $length borderOrSpacing($abbrev);
    }

    .#{$abbrev}t-#{$size},
    .#{$abbrev}y-#{$size} {
      #{$prop}-top: $length borderOrSpacing($abbrev);
    }

    .#{$abbrev}r-#{$size},
    .#{$abbrev}x-#{$size} {
      #{$prop}-right: $length borderOrSpacing($abbrev);
    }

    .#{$abbrev}b-#{$size},
    .#{$abbrev}y-#{$size} {
      #{$prop}-bottom: $length borderOrSpacing($abbrev);
    }
    .#{$abbrev}l-#{$size},
    .#{$abbrev}x-#{$size} {
      #{$prop}-left: $length borderOrSpacing($abbrev);
    }
  }
}

// ## Flexbox
$flex-positions: (
  'center',
  'flex-start',
  'flex-end',
  'space-around',
  'space-between',
  'stretch'
);

@each $flex-pos in $flex-positions {
  .justify-content--#{$flex-pos} {
    justify-content: unquote($flex-pos);
  }
  .align-items--#{$flex-pos} {
    align-items: unquote($flex-pos);
  }
  .align-content--#{$flex-pos} { // Only applicable with wrapping and multiple lines (rows) of items
    align-content: unquote($flex-pos);
  }
}

.flex {
  display: flex !important;

  &--center {
    justify-content: center;
    align-items: center;
    text-align: center;
  }

  &--col {
    flex-direction: column;
  }

  &--row {
    flex-direction: row;
  }

  &--wrap {
    flex-wrap: wrap;
  }

  @each $value in 0 5 10 15 20 25 30 33 40 50 60 75 100 {
    &--basis-#{$value} {
      $valuePr: $value + '%';
      max-width: unquote($valuePr) !important;
      flex-basis: unquote($valuePr) !important;
      flex-grow: 0;
    }
  }

  @each $value in 0 1 2 3 4 5 {
    &--shrink-#{$value} {
      flex-shrink: $value !important;
    }

    &--grow-#{$value} {
      flex-grow: $value !important;
      max-width: initial;
      max-width: auto;
    }
  }
}

// ## Misc
html { font-family: monospace; font-size: 18px }